#lang racket
(define-struct carousel-slot (name quantity price index))

(define (create-carousel contents)
  (map (lambda (item) (make-carousel-slot (car item) (string->number (cadr item)) (string->number (caddr item)) (string->number (cadddr item)))) contents))

(define (read-carousel-file filename)
  (with-input-from-file filename
    (lambda ()
      (let loop ((line (read-line)) (result '()) (counter 1))
        (cond
          ((eof-object? line) (reverse result))
          ((= counter 5)
           (loop (read-line) result 1))
          (else
           (let ((item (string-split line ",")))
             (loop (read-line) (cons item result) (+ counter 1)))))))))

(define (add-item-to-carousel carousel item)
  (cons item carousel))

(define (remove-item-from-carousel carousel index)
  (cond
    [(empty? carousel) empty]
    [(= index 0) (cdr carousel)]
    [else (cons (car carousel) (remove-item-from-carousel (cdr carousel) (- index 1)))]))

(define (get-carousel-slot carousel index)
  (cond
    [(empty? carousel) empty]
    [(= index 0) (car carousel)]
    [else (get-carousel-slot (cdr carousel) (- index 1))]))

(define (update-carousel-slot carousel index slot)
  (cond
    [(empty? carousel) empty]
    [(= index 0) (cons slot (cdr carousel))]
    [else (cons (car carousel) (update-carousel-slot (cdr carousel) (- index 1) slot))]))

